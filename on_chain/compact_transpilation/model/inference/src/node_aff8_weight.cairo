use orion::operators::tensor::{FP16x16Tensor, Tensor, TensorTrait};
use orion::numbers::{FixedTrait, FP16x16};

fn get_node_aff8_weight() -> Tensor<FP16x16> {
  let shape = array![20, 30];
  let weights_num = array![16110, 18902, 6125, 4204, 10340, 10364, 11730, 1618, 28837, 16930, 4651, 2153, 6721, 27635, 11201, 6614, 12544, 12337, 3266, 6750, 5523, 6699, 12568, 9222, 2567, 11788, 10418, 11348, 8531, 2410, 8566, 819, 14482, 18784, 10053, 4982, 24164, 4245, 895, 6853, 420, 3910, 4131, 4226, 7165, 21479, 13668, 1270, 14262, 5800, 7689, 37992, 1066, 6471, 3875, 4153, 15151, 787, 2790, 8848, 7466, 1424, 2463, 25418, 4048, 5633, 9437, 10461, 1588, 5635, 16612, 2941, 15304, 335, 9999, 20010, 6191, 26352, 15959, 5156, 14754, 10948, 6152, 2973, 9302, 20151, 7857, 16756, 7155, 187, 2279, 7538, 2235, 1895, 3620, 4736, 10964, 12499, 2248, 1532, 9533, 18556, 27032, 2777, 9219, 18340, 15306, 7151, 4811, 3679, 12957, 482, 546, 11060, 2564, 5743, 35167, 19168, 1772, 7069, 10806, 14634, 1549, 15312, 6600, 1962, 12555, 6669, 2839, 30785, 6688, 7354, 8506, 294, 15928, 4364, 12176, 13313, 13821, 2300, 12681, 25262, 14776, 11012, 9036, 12661, 156, 12295, 4071, 2733, 980, 1768, 11147, 13058, 1775, 2124, 2972, 30911, 7550, 21036, 4250, 5790, 3068, 2329, 21568, 3354, 17133, 5831, 19162, 4573, 3590, 3264, 20654, 5129, 17514, 11048, 7104, 4060, 17076, 1453, 34641, 2016, 5596, 7978, 11036, 6738, 1334, 4394, 11913, 8424, 7964, 11522, 1299, 6481, 1537, 8376, 1368, 16965, 25348, 5593, 7760, 2333, 24625, 18493, 7072, 9728, 8108, 8655, 2238, 3780, 11378, 399, 3999, 14514, 15576, 2929, 10190, 1920, 12416, 10074, 21798, 20647, 4958, 20106, 7570, 5653, 10099, 27616, 8545, 1932, 17570, 2049, 8625, 6487, 5530, 2531, 2510, 20492, 6152, 5715, 13238, 645, 11747, 7115, 3402, 5806, 6130, 498, 12237, 22146, 337, 16886, 3501, 11453, 21598, 2450, 1081, 6040, 14255, 7602, 10666, 15860, 13539, 3301, 23337, 5538, 12187, 14681, 13606, 17979, 18581, 11967, 16590, 19974, 5532, 4691, 15040, 14807, 19825, 1940, 3828, 20913, 3386, 4219, 1627, 17085, 22422, 3274, 7934, 3453, 10, 9385, 2200, 5265, 8341, 13295, 5312, 16829, 13949, 143, 2159, 2871, 19216, 16081, 16191, 7167, 12703, 9605, 3445, 2601, 13426, 11693, 8317, 1170, 12313, 18848, 12735, 6891, 189, 26026, 10047, 2571, 7851, 1671, 7624, 441, 3886, 6425, 25926, 18106, 5283, 15542, 6903, 16507, 897, 5018, 4706, 1221, 19189, 13373, 4409, 9062, 7927, 14472, 3227, 9592, 11377, 9464, 19420, 9538, 1546, 7230, 1874, 25533, 12129, 31577, 3372, 2866, 6364, 5532, 7974, 20966, 3971, 3965, 10301, 24856, 1554, 13811, 115, 2183, 9001, 12293, 6037, 17228, 11132, 3264, 15280, 7484, 1944, 4305, 8346, 2627, 8683, 28025, 22037, 13122, 3062, 12226, 7120, 4653, 11815, 13324, 38002, 11020, 2732, 11568, 3268, 13285, 2131, 7696, 6513, 2120, 3453, 6546, 2112, 5076, 20003, 1883, 16424, 8050, 142, 15647, 1521, 9440, 9712, 10201, 11939, 15685, 14227, 4904, 11325, 4684, 9547, 11181, 14130, 6991, 14773, 15117, 1010, 11725, 28931, 1782, 12882, 6325, 1302, 8102, 3502, 3230, 11513, 18908, 30463, 153, 5518, 2073, 1305, 1334, 12001, 3565, 1287, 18538, 8846, 10025, 3030, 5175, 9087, 12186, 9004, 12220, 2495, 10537, 9197, 7498, 10471, 3958, 11163, 11063, 23903, 4465, 9486, 14620, 4554, 3024, 16386, 184, 16312, 16270, 17690, 6358, 13572, 26950, 4072, 2651, 11963, 1797, 32122, 17212, 5630, 13042, 1463, 6946, 4263, 10439, 2979, 11858, 15618, 5627, 7258, 14531, 5816, 4795, 15201, 10174, 10083, 13962, 10310, 2330, 7389, 8993, 6799, 27330, 13707, 3919, 284, 2872, 22916, 10365, 7593, 16771, 10675, 12737, 3797, 13315, 6333, 21833, 10258, 2827, 4201, 15126, 13897, 10103, 1741, 1656, 14088, 9663, 17414, 22653, 12388, 6699, 11872, 4334, 12749, 13555, 4821, 4009, 16064, 10098, 27964, 4640, 6783, 7077, 21220, 221, 25762, 11045, 12907, 6214, 7847, 1205, 2969, 1887, 20411, 10042, 3924, 4599, 18840, 10149, 874, 4299, 6396, 7792, 15, 18063, 13726, 7919, 2412, 26927, 2003, 1017, 12506, 8034, 16863, 15025, 1216, 6567, 11017, 7091, 14349, 20710, 16470, 16287, 8847, 3571, 3891, 6748, 6891, 2074, 7978, 13986, 14904, 13335];
  let weights_sign = array![true, true, false, true, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, true, true, true, true, false, false, true, true, false, false, false, true, true, false, true, true, true, false, true, false, true, true, true, true, false, false, false, false, true, false, true, true, false, false, true, true, false, true, true, false, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, false, true, false, false, false, true, false, false, true, false, false, false, true, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, true, true, true, true, false, true, false, true, true, true, true, false, true, true, false, false, false, false, true, true, false, true, true, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, true, false, false, true, true, false, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, true, false, false, true, true, false, true, true, false, false, false, true, false, false, false, true, true, false, false, false, true, true, true, false, false, false, true, true, false, false, false, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true, true, false, true, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, true, true, false, true, true, true, true, false, true, true, false, false, false, true, false, false, true, true, false, false, true, true, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, true, false, false, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, false, false, true, false, true, true, true, true, true, false, true, false, false, false, true, true, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, false, true, true, false];
  let mut data = array![];
  let mut index = 0;
  loop {
    if index == weights_num.len() { break; }
    data.append(FP16x16 { mag: *weights_num.at(index), sign: *weights_sign.at(index) });
    index += 1;
  };
  TensorTrait::new(shape.span(), data.span())
}